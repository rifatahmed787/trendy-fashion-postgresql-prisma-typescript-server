
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// user model

model User {
  id       Int      @id @default(autoincrement())
  username String   
  email    String   @unique
  password String
  avatar String?
  role String @default("user")
  address Address?
  purchasedProducts Products[]
  reviewProducts ProductReview[]
  posts     Post[]
  wishLists    WishList[] 
  @@map("Users")
}

model Address {
  id Int @id @default(autoincrement())
  street_address String
  city String
  postal_code String
  country String
  phone_number String
  district_name String
  address_id Int  @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [address_id], references: [id])
}


// Products model

model Products {
  id                  Int       @id @default(autoincrement())
  productId           String    @unique
  productName         String
  productDetails      String?
  productColor        String
  productQuality      String    
  productImage        String[]
  productSize         String[]
  productPrice        Float
  productRating       Float?
  productSpecification String[]
  productCategory     String   
  productGender       String   
  age                 String?   
  relatedProducts     String[]  
  buyerId Int?
  buyer               User? @relation(fields: [buyerId], references: [id])
  productReviews      ProductReview[]
  wishLists           WishList[]
  createdAt  DateTime @default(now())
}


// product reviews
model ProductReview {
  id           Int      @id @default(autoincrement())
  rating       Int      // Numeric rating (e.g., 1-5 stars)
  reviewText   String?  // Optional text review/comment
  reviewDate   DateTime // Date and time the review was submitted
  reviewer     User     @relation( fields: [reviewerId], references: [id]) // User who wrote the review
  reviewerId   Int
  productId    Int      @map("product_id") // The ID of the product being reviewed
  review      Products  @relation(fields: [productId], references: [id])
}


// cart model

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      // Foreign key to associate the cart with a user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  CartProduct[]
}

model CartProduct {
  id         Int     @id @default(autoincrement())
  cartId     Int
  productId  Int     // Foreign key to associate the product with the cart
  quantity   Int     // The quantity of the product in the cart
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cart Cart? @relation(fields: [cartId], references: [id])
}



// order model
model Order {
  id        Int      @id @default(autoincrement())
  userId    Int      // Foreign key to associate the order with a user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  OrderProduct[]
}

model OrderProduct {
  id         Int     @id @default(autoincrement())
  orderId    Int
  productId  Int     // Foreign key to associate the product with the order
  quantity   Int     // The quantity of the product in the order
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order Order? @relation(fields: [orderId], references: [id])
}


// wish list model

model WishList {
  id      Int    @id @default(autoincrement())
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  productId Int
  product Products @relation(fields: [productId], references: [id])
}



// blog post model

model Category{
  id Int @id @default(autoincrement())
  name String
  posts Post[]
  @@map("Categories")
}


model Post{
  id Int @id @default(autoincrement())
  title String
  author_id Int
  author User @relation(fields: [author_id], references: [id])
  category_id Int
  category Category @relation(fields: [category_id], references:[id] )
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("Posts")
}


