generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user model

model User {
  id                Int             @id @default(autoincrement())
  username          String
  email             String          @unique
  password          String
  avatar            String          @default("https://res.cloudinary.com/dztlowlu0/image/upload/v1700031261/avatar_ylo9mt.png")
  role              Role            @default(USER)
  address           Address?
  purchasedProducts Products[]
  reviewProducts    ProductReview[]
  posts             Post[]
  cartProducts      CartProduct[]
  wishLists         WishList[]
  PostComment       PostComment[]
  PostLike          PostLike[]
  createdAt        DateTime        @default(now())
  

  @@map("Users")
}

model DeviceToken {
  id          Int    @id @default(autoincrement())
  deviceToken String
}

model Address {
  id             Int      @id @default(autoincrement())
  //  id String          @id @default(uuid())
  street_address String
  city           String
  postal_code    String
  country        String
  phone_number   String
  district_name  String
  address_id     Int      @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user           User     @relation(fields: [address_id], references: [id])
}

model slider {
  id    Int    @id @default(autoincrement())
  title String
  des   String
  img   String
}

model sliderHero {
  id        Int      @id @default(autoincrement())
  title     String
  subTitle  String
  lgImg     String
  smImg     String
  startDate DateTime
  endDate   DateTime
}

model service {
  id              Int    @id @default(autoincrement())
  value           String
  service         String
  paymentDetails  String
  shipmentDetails String
}

model ModalImg {
  id        Int      @id @default(autoincrement())
  img       String
  startTime DateTime
  endTime   DateTime
}

// Products model

model ProductCategory {
  id           Int        @id @default(autoincrement())
  categoryName String
  products     Products[]
}

model ProductSize {
  id       Int        @id @default(autoincrement())
  size     String
  products Products[] @relation("ProductSizes")
}

model ProductColor {
  id       Int        @id @default(autoincrement())
  color    String
  products Products[] @relation("ProductColors")
}

model Products {
  id                    Int             @id @default(autoincrement())
  productId             String          @unique
  productName           String
  productDetails        String?
  productColors         ProductColor[]  @relation("ProductColors")
  productQualities      String[]
  productImages         String[]
  productSizes          ProductSize[]   @relation("ProductSizes")
  oldPrice              Float           @default(0.0)
  productPrice          Float
  productRating         Float?
  productSpecifications String[]
  category_id           Int
  productCategory       ProductCategory @relation(fields: [category_id], references: [id])
  productType           String
  productGender         String
  ages                  String[]
  quantity              Int
  buyerId               Int?
  buyer                 User?           @relation(fields: [buyerId], references: [id])
  productReviews        ProductReview[]
  wishLists             WishList[]
  cartProducts          CartProduct[]
  createdAt             DateTime        @default(now())
}

// product reviews
model ProductReview {
  id         Int      @id @default(autoincrement())
  rating     Int
  reviewText String?
  createdAt  DateTime @default(now())
  reviewer   User     @relation(fields: [reviewerId], references: [id])
  reviewerId Int
  productId  Int      @map("product_id")
  review     Products @relation(fields: [productId], references: [id])
}

// cart model
model CartProduct {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  productId     Int
  product       Products @relation(fields: [productId], references: [id])
  receipt_url   String?  @default("")
  quantity      Int      @default(1)
  productSize   String[]
  productColor  String[]
  totalPrice    Float    @default(0.0)
  paymentStatus Boolean  @default(false)
  orderStatus   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Status   @default(Pending)
}

// wish list model

model WishList {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Products @relation(fields: [productId], references: [id])
}

model latestSectionHero {
  id       Int    @id @default(autoincrement())
  title    String
  subTitle String
  imgOne   String
  imgTwo   String
}

model HeroSection {
  id        Int    @id @default(autoincrement())
  subTitle  String
  title     String
  paragraph String
  img       String
}

model dealSection {
  id       Int    @id @default(autoincrement())
  campaign String
  shipping String
  smImgOne String
  smImgTwo String
  lgImg    String
}

// faq/accordian model

model ProductAccordian {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  category String
}

// blog post model

model PostCategory {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]

  @@map("PostCategories")
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  content     String?
  published   Boolean       @default(false)
  author_id   Int
  author      User          @relation(fields: [author_id], references: [id])
  category_id Int
  category    PostCategory  @relation(fields: [category_id], references: [id])
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  comments    PostComment[]
  likes       PostLike[]

  @@map("Posts")
}

model PostComment {
  id          Int    @id @default(autoincrement())
  comment     String
  post_id     Int
  post        Post   @relation(fields: [post_id], references: [id])
  commenterId Int
  commenter   User   @relation(fields: [commenterId], references: [id])
}

model socialLink {
  id        Int    @id @default(autoincrement())
  facebook  String
  twitter   String
  instagram String
  youtube   String
}

model PostLike {
  id      Int  @id @default(autoincrement())
  like    Int  @default(0)
  post_id Int
  post    Post @relation(fields: [post_id], references: [id])
  likerId Int
  liker   User @relation(fields: [likerId], references: [id])
  // @@unique([post_id, likerId])
}

model termsConditon {
  id    Int      @id @default(autoincrement())
  title String[]
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum Status {
  Pending
  Accepted
  Rejected
}
